import { NextRequest, NextResponse } from 'next/server'
import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY)

export async function POST(request: NextRequest) {
  try {
    const { 
      messageId, 
      representative, 
      subject, 
      messageContent, 
      signatures, 
      senderName, 
      senderEmail, 
      sendFormalEmail 
    } = await request.json()

    // Validate required fields
    if (!messageId || !representative || !subject || !messageContent) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    console.log('Sending message to representative:', {
      representative: `${representative.first_name} ${representative.last_name}`,
      subject,
      messageContent,
      signatureCount: signatures?.length || 0,
      sendFormalEmail
    })

    // If sendFormalEmail flag is set, send a formal letter via email
    if (sendFormalEmail) {
      const formalSubject = `[POLISEE] ${subject}`
      
      // Clean the message content by removing placeholder fields and duplicate signatures
      let cleanedMessage = messageContent
        .replace(/\[Your Name\]/g, '')
        .replace(/\[Your Address\]/g, '')
        .replace(/\[City, State, ZIP\]/g, '')
        .replace(/\[City, State, Zip\]/g, '')
        .replace(/\[Email Address\]/g, '')
        .replace(/\[Phone Number\]/g, '')
        .replace(/Sincerely,\s*\n\s*\n/g, '')
        .replace(/Yours sincerely,\s*\n\s*\n/g, '')
        .replace(/--- Signatures ---[\s\S]*$/g, '')
        .replace(/Sincerely,\s*\n\s*\[Your Name\][\s\S]*$/g, '')
        .replace(/Sincerely,\s*$/, '')
        .trim()
      
      // Create formal letter content
      const formalMessage = `
${subject}

${new Date().toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}

Dear ${representative.title} ${representative.first_name} ${representative.last_name},

${cleanedMessage}

Thank you for your time and consideration.

Sincerely,
${senderName || 'Your Constituent'}
${senderEmail ? `\n${senderEmail}` : ''}
      `.trim()

      try {
        const { data, error } = await resend.emails.send({
          from: 'onboarding@resend.dev',
          to: ['benny.yang@gauntletai.com'],
          subject: formalSubject,
          html: `
            <div style="font-family: 'Times New Roman', serif; max-width: 800px; margin: 0 auto; padding: 40px 20px; line-height: 1.6; color: #333;">
              <div style="text-align: center; margin-bottom: 40px;">
                <h1 style="margin: 0; font-size: 24px; font-weight: normal; color: #2c3e50;">
                  ${subject}
                </h1>
                <p style="margin: 20px 0 0 0; font-size: 16px; color: #666;">
                  ${new Date().toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </p>
              </div>
              
              <div style="margin-bottom: 30px;">
                <p style="margin: 0; font-size: 16px;">
                  <strong>Dear ${representative.title} ${representative.first_name} ${representative.last_name},</strong>
                </p>
              </div>
              
                             <div style="margin-bottom: 30px; font-size: 16px;">
                 ${cleanedMessage.split('\n').map((paragraph: string) => 
                   paragraph.trim() ? `<p style="margin: 0 0 16px 0;">${paragraph}</p>` : ''
                 ).join('')}
               </div>
              
              <div style="margin-top: 40px;">
                <p style="margin: 0 0 10px 0; font-size: 16px;">
                  Thank you for your time and consideration.
                </p>
                <p style="margin: 0; font-size: 16px;">
                  <strong>Sincerely,</strong><br>
                  ${senderName || 'Your Constituent'}
                  ${senderEmail ? `<br>${senderEmail}` : ''}
                </p>
              </div>
              
              <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; font-size: 12px; color: #666;">
                Generated by Polisee - Amplifying Citizen Voices
              </div>
            </div>
          `
        })

        if (error) {
          console.error('❌ Error sending formal email:', error)
          throw new Error('Failed to send formal email')
        }

        console.log('✅ Formal email sent successfully!')
        console.log('📧 Email ID:', data?.id)
      } catch (emailError) {
        console.error('❌ Failed to send formal email:', emailError)
        // Continue with regular flow even if email fails
      }
    }

    // Add signature list to the message for logging
    let finalMessage = messageContent
    
    if (signatures && signatures.length > 0) {
      finalMessage += '\n\n--- Signatures ---\n'
      signatures.forEach((signature: string, index: number) => {
        finalMessage += `${index + 1}. ${signature}\n`
      })
    }

    // Record the message sending (in production, save to database)
    const messageRecord = {
      messageId,
      representative: {
        name: `${representative.first_name} ${representative.last_name}`,
        party: representative.party,
        state: representative.state
      },
      subject,
      messageContent: finalMessage,
      signatureCount: signatures?.length || 0,
      sentAt: new Date().toISOString(),
      contactMethod: sendFormalEmail ? 'formal_email' : 'contact_form',
      formalEmailSent: sendFormalEmail || false
    }

    console.log('Message record:', messageRecord)

    return NextResponse.json({
      success: true,
      message: sendFormalEmail ? 'Formal letter sent successfully' : 'Message sent successfully',
      messageRecord,
      contactMethod: sendFormalEmail ? 'formal_email' : 'contact_form',
      signatureCount: signatures?.length || 0,
      formalEmailSent: sendFormalEmail || false
    })

  } catch (error) {
    console.error('Error sending message:', error)
    return NextResponse.json(
      { error: 'Failed to send message' },
      { status: 500 }
    )
  }
} 